spring.application.name=auth-service

# Server Configuration
server.port=${SERVER_PORT:8080}
server.servlet.context-path=${CONTEXT_PATH:}

# Database Configuration - Persistent H2 Database
spring.datasource.url=${DATABASE_URL:jdbc:h2:file:./data/authdb;DB_CLOSE_ON_EXIT=FALSE;AUTO_RECONNECT=TRUE}
spring.datasource.driverClassName=${DATABASE_DRIVER:org.h2.Driver}
spring.datasource.username=${DATABASE_USERNAME:sa}
spring.datasource.password=${DATABASE_PASSWORD:password}

# H2 Console (for development only)
spring.h2.console.enabled=${H2_CONSOLE_ENABLED:true}
spring.h2.console.path=${H2_CONSOLE_PATH:/h2-console}

# JPA Configuration
spring.jpa.database-platform=${JPA_DATABASE_PLATFORM:org.hibernate.dialect.H2Dialect}
spring.jpa.hibernate.ddl-auto=${JPA_DDL_AUTO:update}
spring.jpa.show-sql=${JPA_SHOW_SQL:false}
spring.jpa.properties.hibernate.format_sql=${JPA_FORMAT_SQL:true}

# Authorization Server Configuration
auth.server.issuer=${AUTH_SERVER_ISSUER:http://localhost:8080}
auth.server.jwk.key-size=${JWK_KEY_SIZE:2048}

# OAuth2 Token Configuration
oauth2.token.access-token-validity=${ACCESS_TOKEN_VALIDITY:PT2H}
oauth2.token.refresh-token-validity=${REFRESH_TOKEN_VALIDITY:P7D}
oauth2.token.id-token-validity=${ID_TOKEN_VALIDITY:PT2H}
oauth2.token.reuse-refresh-tokens=${REUSE_REFRESH_TOKENS:false}

# Redis Configuration for Performance Enhancement
spring.data.redis.url=${REDIS_URL:redis://default:odVp5VeeJb5lbfFOcG3ecMqDwfkx1LNt@redis-10786.c267.us-east-1-4.ec2.redns.redis-cloud.com:10786}
spring.data.redis.timeout=${REDIS_TIMEOUT:2000ms}
spring.data.redis.jedis.pool.max-active=${REDIS_POOL_MAX_ACTIVE:20}
spring.data.redis.jedis.pool.max-idle=${REDIS_POOL_MAX_IDLE:10}
spring.data.redis.jedis.pool.min-idle=${REDIS_POOL_MIN_IDLE:2}
spring.data.redis.jedis.pool.max-wait=${REDIS_POOL_MAX_WAIT:5000ms}

# Spring Session Redis Configuration
spring.session.store-type=redis
spring.session.redis.namespace=${SESSION_NAMESPACE:auth-service:session}
spring.session.timeout=${SESSION_TIMEOUT:PT2H}

# Cache Configuration
spring.cache.type=redis
spring.cache.redis.time-to-live=${CACHE_TTL:PT1H}
spring.cache.redis.cache-null-values=false

# Security Configuration
security.endpoints.public=${PUBLIC_ENDPOINTS:/,/home,/login,/logout,/h2-console/**,/actuator/**,/oauth2/**,/.well-known/**,/api/logout,/swagger-ui/**,/v3/api-docs/**,/swagger-resources/**,/webjars/**}
security.endpoints.protected=${PROTECTED_ENDPOINTS:/api/**,/profile}

# Logging Configuration
logging.level.org.springframework.security=${SECURITY_LOG_LEVEL:INFO}
logging.level.org.springframework.security.oauth2=${OAUTH2_LOG_LEVEL:INFO}
logging.level.com.auth=${APP_LOG_LEVEL:INFO}
logging.level.root=${ROOT_LOG_LEVEL:INFO}

# Actuator Configuration
management.endpoints.web.exposure.include=${ACTUATOR_ENDPOINTS:health,info,metrics}
management.endpoint.health.show-details=${ACTUATOR_HEALTH_DETAILS:when-authorized}

# Swagger/OpenAPI Configuration
springdoc.api-docs.path=${SWAGGER_API_DOCS_PATH:/v3/api-docs}
springdoc.swagger-ui.path=${SWAGGER_UI_PATH:/swagger-ui.html}
springdoc.swagger-ui.enabled=${SWAGGER_UI_ENABLED:true}
springdoc.show-actuator=${SWAGGER_SHOW_ACTUATOR:true}
springdoc.swagger-ui.tryItOutEnabled=${SWAGGER_TRY_IT_OUT:true}
springdoc.swagger-ui.operationsSorter=${SWAGGER_OPERATIONS_SORTER:method}
springdoc.swagger-ui.tagsSorter=${SWAGGER_TAGS_SORTER:alpha}
springdoc.swagger-ui.oauth.clientId=${SWAGGER_CLIENT_ID:auth-client}
springdoc.swagger-ui.oauth.clientSecret=${SWAGGER_CLIENT_SECRET:secret}
springdoc.swagger-ui.oauth.usePkceWithAuthorizationCodeGrant=${SWAGGER_USE_PKCE:true}